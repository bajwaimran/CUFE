
@{
    ViewBag.Title = "Advanced Search";
    Layout = "~/Views/Shared/_LayoutBackend.cshtml";
    IEnumerable<CUFE.Models.Country> countries = CUFE.Helpers.FastController.AllCountries();
}
@section head{
    <script>
    var slat;
    var slon;
    var elat;
    var elon;
    function btnOK_Click(s, e) {
    var x = startcountry.GetText();
    //alert('Wait... You are searching freights for ' + x);
    //str = MVCxClientUtils.GetSerializedEditorValuesInContainer("searchForm");
    //str = $("form").serialize();
    var sd = startdate.GetText();
    var ed = enddate.GetText();
    if (startcountry.GetText() != null && startcountry.GetText() != '') {
    str = "startcountry=" + startcountry.GetText();
    if (endcountry.GetText() != null && endcountry.GetText() != '') {
    str = str + "&endcountry=" + endcountry.GetText();
    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    window.open("@Url.Action("Search", "Freights")" + "?" + str);
    } else {
    alert("Please select destination Country!");
    }
    }
    //check if searched by city name
    else if (startlocation.GetText() != null && startlocation.GetText() != '') {
    str = "startlocation=" + startlocation.GetText();
    if (endlocation.GetText() != null && endlocation.GetText() != '') {
    str = str + "&endlocation=" + endlocation.GetText();
    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    window.open("@Url.Action("Search", "Freights")" + "?" + str);
    } else {
    alert("Please enter destination city!");
    }
    }
    //check by zip code
    else if (statzip.GetText() != null && statzip.GetText() != '') {
    str = "statzip=" + statzip.GetText();
    if (endzip.GetText() != null && endzip.GetText() != '') {
    str = str + "&endzip=" + endzip.GetText();
    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    window.open("@Url.Action("Search", "Freights")" + "?" + str);
    } else {
    alert("Please enter destination Zip code!");
    }
    } else {
    alert("Please enter a criteria to search!");
    }


    }

    function btnLoads_Click(s, e) {
    var sd = startdate.GetText();
    var ed = enddate.GetText();

    if (startcountry.GetText() != null && startcountry.GetText() != '') {
    str = "startcountry=" + startcountry.GetText();
    if (endcountry.GetText() != null && endcountry.GetText() != '') {
    str = str + "&endcountry=" + endcountry.GetText();
    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    window.open("@Url.Action("Search", "Loads")" + "?" + str);
    } else {
    alert("Please select destination Country!");
    }
    }
    //check if searched by city name
    else if (startlocation.GetText() != null && startlocation.GetText() != '') {
    str = "startlocation=" + startlocation.GetText();
    if (endlocation.GetText() != null && endlocation.GetText() != '') {
    str = str + "&endlocation=" + endlocation.GetText();
    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    window.open("@Url.Action("Search", "Loads")" + "?" + str);
    } else {
    alert("Please enter destination city!");
    }
    }
    //check by zip code
    else if (statzip.GetText() != null && statzip.GetText() != '') {
    str = "statzip=" + statzip.GetText();
    if (endzip.GetText() != null && endzip.GetText() != '') {
    str = str + "&endzip=" + endzip.GetText();

    if (sd != '' && ed != '') {
    str = str + "&startdate=" + sd + "&enddate=" + ed;
    }
    //check if search using radius
    console.log(withRadius.GetValue());
    if (withRadius.GetValue() == true) {
    getGeoCodeByZip(statzip.GetText(), endzip.GetText());
    setTimeout(function () {
    str = "startLat=" + slat + "&startLon=" + slon + "&endLat=" + elat + "&endLon=" + elon + "&startradius=" + startradius.GetValue() + "&endradius=" + endradius.GetValue();
    window.open("@Url.Action("Search", "Loads")" + "?" + str);
    }, 1000);

    } else {

    window.open("@Url.Action("Search", "Loads")" + "?" + str);
    }

    } else {
    alert("Please enter destination Zip code!");
    }
    } else {
    alert("Please enter a criteria to search!");
    }

        }




        function rxVal_btn(s, e) {
            console.log("you hit me again!!");
            endlocation.SetValue("");
            startlocation.SetValue("");
            startcountry
            endzip

            startcountry.SetValue("");
            statzip.SetValue("");
            startlocation.SetValue("");
            startdate.SetValue();
            endcountry.SetValue();
            endzip.SetValue("");
            endlocation.SetValue("");
            enddate.SetValue();
        }
    </script>

}
<div id="ResizedDiv" style="width: 100%; margin-top:-30px;">
    @Html.DevExpress().FormLayout(settings =>
{
    settings.Name = "searchForm";

    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    var groupItems = settings.Items.AddGroupItem(groupSettings =>
    {

        groupSettings.Caption = "Search form";
        groupSettings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
        groupSettings.ColumnCount = 5;

    });

    //start location
    groupItems.Items.Add(i =>
    {
        i.Caption = "Loading Country";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;

        i.NestedExtension().ComboBox(s =>
        {
            s.Name = "startcountry";
            s.Properties.TextField = "CountryName";
            s.Properties.ValueField = "CountryName";
            s.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            s.Properties.DataSource = countries;
        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Loading Postcode";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().TextBox(s =>
        {
            s.Name = "statzip";

        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Loading City";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().TextBox(s =>
        {
            s.Name = "startlocation";

        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Loading Date";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().DateEdit(
            s =>
            {
                s.Name = "startdate";
            });

    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Radius";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;

        i.NestedExtension().TrackBar(s =>
        {
            s.Name = "startradius";
            s.Properties.SmallTickFrequency = 5;
            s.Properties.LargeTickInterval = 10;
            s.Properties.MaxValue = 100;
            s.Position = 10;
            s.Properties.ScalePosition = ScalePosition.RightOrBottom;
        }
        );
    });


    //unloading
    groupItems.Items.Add(i =>
    {
        i.Caption = "Unloading Country";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;

        i.NestedExtension().ComboBox(s =>
        {
            s.Name = "endcountry";
            s.Properties.TextField = "CountryName";
            s.Properties.ValueField = "CountryName";
            s.Properties.ClearButton.DisplayMode = ClearButtonDisplayMode.OnHover;
            s.Properties.DataSource = countries;
        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "unloading Postcode";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().TextBox(s =>
        {
            s.Name = "endzip";

        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "unLoading City";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().TextBox(s =>
        {
            s.Name = "endlocation";

        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Loading Date";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;
        i.NestedExtension().DateEdit(
            s =>
            {
                s.Name = "enddate";
            });

    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Radius";
        i.VerticalAlign = FormLayoutVerticalAlign.Middle;

        i.NestedExtension().TrackBar(s =>
        {
            s.Name = "endradius";
            s.Properties.SmallTickFrequency = 5;
            s.Properties.LargeTickInterval = 10;
            s.Properties.MaxValue = 100;
            s.Position = 10;
            s.Properties.ScalePosition = ScalePosition.RightOrBottom;
        }
        );
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "Search Using Radius";
        i.NestedExtension().CheckBox(c =>
        {
            c.Name = "withRadius";
        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "";
        i.NestedExtension().Button(b =>
        {
            b.Name = "searchBtn";
            b.Text = "Search Freights";
            b.ClientSideEvents.Click = "btnOK_Click";

        });
    });

    groupItems.Items.Add(i =>
    {
        i.Caption = "";
        i.NestedExtension().Button( b=>
        {
            b.Name = "searchLoadsBtn";
            b.Text = "Search Loads";
            b.ClientSideEvents.Click = "btnLoads_Click";
        });
    });


    groupItems.Items.Add(i =>
    {
        i.Caption = "";
        i.NestedExtension().Button(b =>
        {
            b.Name = "clearBtn";
            b.Text = "Clear Search";
            b.ClientSideEvents.Click = "rxVal_btn";
        });
    });


}).GetHtml()

    @*@Html.DevExpress().Panel(settings =>
        {
            settings.Name = "freightsPanel";
            settings.SetContent(()=> {
                //ViewContext.Writer.Write(@"<h5>Latest Freights</h5>");
                ViewContext.Writer.Write(@Html.Action("AllFreightsGridViewPartial", "Freights"));
            });
        }).GetHtml()


        @Html.DevExpress().Panel(settings =>
        {
            settings.Name = "loadsPanel";
            settings.SetContent(()=> {
                //ViewContext.Writer.Write(@"<h5>Latest Loads</h5>");
                ViewContext.Writer.Write(@Html.Action("GridViewPartial", "Loads"));
            });
        }).GetHtml()*@



</div>

@section scripts{
    <script>
    var slat;
    var slon;
    var elat;
    var elon;
    function btnOK_Click(s, e) {
        var x = startcountry.GetText();
        //alert('Wait... You are searching freights for ' + x);
        //str = MVCxClientUtils.GetSerializedEditorValuesInContainer("searchForm");
        //str = $("form").serialize();
        var sd = startdate.GetText();
        var ed = enddate.GetText();
        if (startcountry.GetText() != null && startcountry.GetText() != '') {
            str = "startcountry=" + startcountry.GetText();
            if (endcountry.GetText() != null && endcountry.GetText() != '') {
                str = str + "&endcountry=" + endcountry.GetText();
                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                window.open("@Url.Action("Search", "Freights")" + "?" + str);
            } else {
                alert("Please select destination Country!");
            }
        }
        //check if searched by city name
        else if (startlocation.GetText() != null && startlocation.GetText() != '') {
            str = "startlocation=" + startlocation.GetText();
            if (endlocation.GetText() != null && endlocation.GetText() != '') {
                str = str + "&endlocation=" + endlocation.GetText();
                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                window.open("@Url.Action("Search", "Freights")" + "?" + str);
            } else {
                alert("Please enter destination city!");
            }
        }
        //check by zip code
        else if (statzip.GetText() != null && statzip.GetText() != '') {
            str = "statzip=" + statzip.GetText();
            if (endzip.GetText() != null && endzip.GetText() != '') {
                str = str + "&endzip=" + endzip.GetText();
                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                window.open("@Url.Action("Search", "Freights")" + "?" + str);
            } else {
                alert("Please enter destination Zip code!");
            }
        } else {
            alert("Please enter a criteria to search!");
        }


    }

    function btnLoads_Click(s, e) {
        var sd = startdate.GetText();
        var ed = enddate.GetText();

        if (startcountry.GetText() != null && startcountry.GetText() != '') {
            str = "startcountry=" + startcountry.GetText();
            if (endcountry.GetText() != null && endcountry.GetText() != '') {
                str = str + "&endcountry=" + endcountry.GetText();
                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                window.open("@Url.Action("Search","Loads")" + "?" + str);
            } else {
                alert("Please select destination Country!");
            }
        }
        //check if searched by city name
        else if (startlocation.GetText() != null && startlocation.GetText() != '') {
            str = "startlocation=" + startlocation.GetText();
            if (endlocation.GetText() != null && endlocation.GetText() != '') {
                str = str + "&endlocation=" + endlocation.GetText();
                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                window.open("@Url.Action("Search","Loads")" + "?" + str);
            } else {
                alert("Please enter destination city!");
            }
        }
        //check by zip code
        else if (statzip.GetText() != null && statzip.GetText() != '') {
            str = "statzip=" + statzip.GetText();
            if (endzip.GetText() != null && endzip.GetText() != '') {
                str = str + "&endzip=" + endzip.GetText();

                if (sd != '' && ed != '') {
                    str = str + "&startdate=" + sd + "&enddate=" + ed;
                }
                //check if search using radius
                console.log(withRadius.GetValue());
                if (withRadius.GetValue() == true) {
                    getGeoCodeByZip(statzip.GetText(), endzip.GetText());
                    setTimeout(function () {
                        str = "startLat=" + slat + "&startLon=" + slon + "&endLat=" + elat + "&endLon=" + elon + "&startradius=" + startradius.GetValue() + "&endradius=" + endradius.GetValue();
                        window.open("@Url.Action("Search","Loads")" + "?" + str);
                    }, 1000);

                } else {

                    window.open("@Url.Action("Search","Loads")" + "?" + str);
                }

            } else {
                alert("Please enter destination Zip code!");
            }
        } else {
            alert("Please enter a criteria to search!");
        }

    }


    function getGeoCodeByZip(zip1, zip2) {
        //var newurl = "https://dev.virtualearth.net/REST/v1/Locations?postalCode" + zip + "&key=ApuZ25zP2JplCbiYUnTc6nQ-g4MJwgU7L9XaK0HzD0tsiFLpiZg4d_fH0JaqV_LR";
        var newurl = "http://dev.virtualearth.net/REST/v1/Locations?postalCode="+ zip1  +"&key=ApuZ25zP2JplCbiYUnTc6nQ-g4MJwgU7L9XaK0HzD0tsiFLpiZg4d_fH0JaqV_LR";
        $.when($.getJSON(newurl)
            .done(function (json) {
                console.log(json.resourceSets[0].resources[0].name);
                console.log(json.resourceSets[0].resources[0].geocodePoints);
                console.log(json.resourceSets[0].resources[0].geocodePoints[0].coordinates);
                slat = json.resourceSets[0].resources[0].geocodePoints[0].coordinates[0];
                slon = json.resourceSets[0].resources[0].geocodePoints[0].coordinates[1];
                console.log("latitude: " + slat);
                console.log("Longitude: " + slon);
            })
            .fail(function (jqXHR, textStatus, error) {
                alert("error in origin");
            }));

        var secondUrl = "http://dev.virtualearth.net/REST/v1/Locations?postalCode=" + zip2 + "&key=ApuZ25zP2JplCbiYUnTc6nQ-g4MJwgU7L9XaK0HzD0tsiFLpiZg4d_fH0JaqV_LR";
        $.when($.getJSON(secondUrl)
            .done(function (json) {

                elat = json.resourceSets[0].resources[0].geocodePoints[0].coordinates[0];
                elon = json.resourceSets[0].resources[0].geocodePoints[0].coordinates[1];
                console.log("latitude: " + elat);
                console.log("Longitude: " + elon);
            })
            .fail(function (jqXHR, textStatus, error) {
                alert("error for destination");
            }));
    }
    </script>
    <script type="text/javascript">
        var str;
        MVCxClientGlobalEvents.ControlsInitialized.AddHandler(function () {
            startcountry.ValueChanged.AddHandler(OnDemoOptionChanged);
            endcountry.ValueChanged.AddHandler(OnDemoOptionChanged);

            function OnDemoOptionChanged() {
                //$("form").submit();

                var sl = startcountry.GetText();
                //alert(sl);
            };
        });
        function onBeginCallback(s, e) {
            str = MVCxClientUtils.GetSerializedEditorValuesInContainer("searchForm");
            e.customArgs = str;


        }

       
    </script>


}